/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hyperset_H
#define hyperset_H

#include <TProcessor.h>
#include "hyperset_types.h"

namespace hyperset {

class hypersetIf {
 public:
  virtual ~hypersetIf() {}
  virtual void calc(std::set<int32_t> & _return, const std::vector<SetOp> & query) = 0;
  virtual int32_t count(const std::vector<SetOp> & query) = 0;
  virtual int32_t add(const std::string& name, const std::vector<int32_t> & vals) = 0;
  virtual int32_t save() = 0;
};

class hypersetNull : virtual public hypersetIf {
 public:
  virtual ~hypersetNull() {}
  void calc(std::set<int32_t> & /* _return */, const std::vector<SetOp> & /* query */) {
    return;
  }
  int32_t count(const std::vector<SetOp> & /* query */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t add(const std::string& /* name */, const std::vector<int32_t> & /* vals */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t save() {
    int32_t _return = 0;
    return _return;
  }
};

class hyperset_calc_args {
 public:

  hyperset_calc_args() {
  }

  virtual ~hyperset_calc_args() throw() {}

  std::vector<SetOp>  query;

  struct __isset {
    __isset() : query(false) {}
    bool query;
  } __isset;

  bool operator == (const hyperset_calc_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const hyperset_calc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_calc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_calc_pargs {
 public:


  virtual ~hyperset_calc_pargs() throw() {}

  const std::vector<SetOp> * query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_calc_result {
 public:

  hyperset_calc_result() {
  }

  virtual ~hyperset_calc_result() throw() {}

  std::set<int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const hyperset_calc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const hyperset_calc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_calc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_calc_presult {
 public:


  virtual ~hyperset_calc_presult() throw() {}

  std::set<int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class hyperset_count_args {
 public:

  hyperset_count_args() {
  }

  virtual ~hyperset_count_args() throw() {}

  std::vector<SetOp>  query;

  struct __isset {
    __isset() : query(false) {}
    bool query;
  } __isset;

  bool operator == (const hyperset_count_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const hyperset_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_count_pargs {
 public:


  virtual ~hyperset_count_pargs() throw() {}

  const std::vector<SetOp> * query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_count_result {
 public:

  hyperset_count_result() : success(0) {
  }

  virtual ~hyperset_count_result() throw() {}

  int32_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const hyperset_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const hyperset_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_count_presult {
 public:


  virtual ~hyperset_count_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class hyperset_add_args {
 public:

  hyperset_add_args() : name("") {
  }

  virtual ~hyperset_add_args() throw() {}

  std::string name;
  std::vector<int32_t>  vals;

  struct __isset {
    __isset() : name(false), vals(false) {}
    bool name;
    bool vals;
  } __isset;

  bool operator == (const hyperset_add_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(vals == rhs.vals))
      return false;
    return true;
  }
  bool operator != (const hyperset_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_add_pargs {
 public:


  virtual ~hyperset_add_pargs() throw() {}

  const std::string* name;
  const std::vector<int32_t> * vals;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_add_result {
 public:

  hyperset_add_result() : success(0) {
  }

  virtual ~hyperset_add_result() throw() {}

  int32_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const hyperset_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const hyperset_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_add_presult {
 public:


  virtual ~hyperset_add_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class hyperset_save_args {
 public:

  hyperset_save_args() {
  }

  virtual ~hyperset_save_args() throw() {}


  bool operator == (const hyperset_save_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const hyperset_save_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_save_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_save_pargs {
 public:


  virtual ~hyperset_save_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_save_result {
 public:

  hyperset_save_result() : success(0) {
  }

  virtual ~hyperset_save_result() throw() {}

  int32_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const hyperset_save_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const hyperset_save_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hyperset_save_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hyperset_save_presult {
 public:


  virtual ~hyperset_save_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class hypersetClient : virtual public hypersetIf {
 public:
  hypersetClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  hypersetClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void calc(std::set<int32_t> & _return, const std::vector<SetOp> & query);
  void send_calc(const std::vector<SetOp> & query);
  void recv_calc(std::set<int32_t> & _return);
  int32_t count(const std::vector<SetOp> & query);
  void send_count(const std::vector<SetOp> & query);
  int32_t recv_count();
  int32_t add(const std::string& name, const std::vector<int32_t> & vals);
  void send_add(const std::string& name, const std::vector<int32_t> & vals);
  int32_t recv_add();
  int32_t save();
  void send_save();
  int32_t recv_save();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class hypersetProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<hypersetIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (hypersetProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_calc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_save(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  hypersetProcessor(boost::shared_ptr<hypersetIf> iface) :
    iface_(iface) {
    processMap_["calc"] = &hypersetProcessor::process_calc;
    processMap_["count"] = &hypersetProcessor::process_count;
    processMap_["add"] = &hypersetProcessor::process_add;
    processMap_["save"] = &hypersetProcessor::process_save;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~hypersetProcessor() {}
};

class hypersetMultiface : virtual public hypersetIf {
 public:
  hypersetMultiface(std::vector<boost::shared_ptr<hypersetIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~hypersetMultiface() {}
 protected:
  std::vector<boost::shared_ptr<hypersetIf> > ifaces_;
  hypersetMultiface() {}
  void add(boost::shared_ptr<hypersetIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void calc(std::set<int32_t> & _return, const std::vector<SetOp> & query) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->calc(_return, query);
        return;
      } else {
        ifaces_[i]->calc(_return, query);
      }
    }
  }

  int32_t count(const std::vector<SetOp> & query) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->count(query);
      } else {
        ifaces_[i]->count(query);
      }
    }
  }

  int32_t add(const std::string& name, const std::vector<int32_t> & vals) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->add(name, vals);
      } else {
        ifaces_[i]->add(name, vals);
      }
    }
  }

  int32_t save() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->save();
      } else {
        ifaces_[i]->save();
      }
    }
  }

};

} // namespace

#endif
