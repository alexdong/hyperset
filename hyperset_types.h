/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hyperset_TYPES_H
#define hyperset_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace hyperset {

class SetOp {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  SetOp() : op("") {
  }

  virtual ~SetOp() throw() {}

  std::string op;
  std::vector<std::string>  sets;

  struct __isset {
    __isset() : op(false), sets(false) {}
    bool op;
    bool sets;
  } __isset;

  bool operator == (const SetOp & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(sets == rhs.sets))
      return false;
    return true;
  }
  bool operator != (const SetOp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetOp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
